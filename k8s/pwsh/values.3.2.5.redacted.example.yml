# RUDI - this file has been modified from the default one in the chart
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global cluedin values (used for all sub-charts)
global:
  image:
    tag: "3.2.5"
  imagePullSecrets:
    - name: docker-registry-key
  ingress:
    # RUDI - to turn on ssl, set forceHttps and ssl-redirect to true and set secretName to the TLS secret
    forceHttps: false
    annotations:
      kubernetes.io/ingress.class: haproxy
      ingress.kubernetes.io/ssl-redirect: "false"
    tls:
      hosts: []                   # Provide list of hosts to use
      secretName: ""              # TLS Secret to use for ingress - If no hosts create a wildcard host
      hasClusterCA: false         # If certificates are generated by a local CA (secret has 'ca.crt' section)
  dns:
    # RUDI - hostname updated from default 127.0.0.1.nip.io
    hostname: "k1.cluedin.me"  # Base host to use for all URLs. Will be combined with the organization name e.g https://<org-name>.<hostname>
    prefix: ""                    # Adds a subdomain prefix to all ingress urls e.g. adding a prefix of 'staging' will create: https://app.staging.<hostname>
    subdomains:                   # Allows overriding of top-level sub-domains (if needed) e.g https://appstaging.<hostname>
      application: "app"
      openrefine: "clean"
      grafanaAdmin: "grafana"
      prometheusAdmin: "prometheus"
      alertManagerAdmin: "alertmanager"
      seq: "seq"
  email:
    fromAddress: "no-reply@cluedin.com"
  uploadFileSizeLimit: "1gb"      # Sets the maximum size of files that can be uploaded via the UI. Default: 50Mb

wait:
  image:
    repository: "groundnuty/k8s-wait-for"
    tag: "v1.3"
    pullPolicy: IfNotPresent

cluedincontroller:
  enabled: true
  ingress:
    enabled: false
  hosts:
    sqlserver:
      host: '{{ template "cluedin.fullname" . }}-sqlserver'
      users:
        sa:
          passwordSecretName: '{{ template "cluedin.fullname" . }}-sql-admin'

# Kube-Prometheus-Stack :)
monitoring:
  enabled: true # Disabled by default
  exposeAdmin: false # Disabled by default
  proxyUsername: cluedin-ui
  alertmanager:
    alertmanagerSpec:
      alertmanagerConfigSelector:
        matchExpressions:
          - key: alertconfig
            operator: In
            values:
              - cluedin
  grafana:
    plugins:
      - https://github.com/grafana/piechart-panel/releases/download/v1.6.1/grafana-piechart-panel-1.6.1.zip;grafana-piechart-panel
    grafana.ini:
     server:
       domain: '{{ .Values.global.dns.hostname }}'
       root_url: "%(protocol)s://%(domain)s/charts/"
       serve_from_sub_path: true
       enable_gzip: true
     security:
       cookie_samesite: none
       allow_embedding: true
     users:
       allow_sign_up: false
       allow_org_create: false
     auth:
       disable_signout_menu: true
     auth.proxy:
       auto_sign_up: true
       enable_login_token: false
       enabled: true
       header_name: "X-CHART-USER"
       header_property: "username"

  prometheus:
    prometheusSpec:
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 50Mi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Adds explicit nginx-ingress configuration defaults.
nginxConfiguration:
  enabled: false
  # proxyBodySize: "2g"
  # proxyReadTimeout: "120s"
  # proxySendTimeout: "120s"
  # proxyNextUpstream: "off"
  # proxyNextUpstreamTimeout: "15"
  # proxyRequestBuffering: "on"

system:
  # SSO - Set if accessing the auth server externally when running behind a proxy
  enableProxySupport: "true"
  internal:
    # Enable NETCORE coredumps (into /tmp)
    enableCoreDump: ""

# add this section to create an initial organization
# otherwise you can't log in to CluedIn
bootstrap:
  image:
    repository: "alpine"
    tag: "latest"
    pullPolicy: "Always"
  organization:
    # RUDI - name, email and password are blank by default
    name: "cluedin" # required
    email: "admin@cluedin.com" # required
    username: # defaults to email above
    prefix: # first part of the domain to access this org. Defaults to name above.
    password: "<redacted>" # if undefined a random one is generated
    emailDomain: # if undefined it will use the same domain as the email above

logging:
  appInsightsKey: ''

# Override the name of the secret that contains the credentials to pull private docker images
dockerRegistrySecret: docker-registry-key

email:
  secretRef: # either supply a secret with username and password
  user: # or put username
  password: # and password here - a secret with their values will get created
  host:
  port:
  enableSsl: true
  senderDisplayName:

cluedin:
  image: cluedin/cluedin-server:3.2.5
  imagePullPolicy: IfNotPresent
  hostAliases: []
  nodeSelector: {}
  tolerations: [] # Add toleration selector to deployment
  affinity: {}
  configuration: {} # extra configuration to pass to cluedin server
    # delete {} above and uncomment the line below to turn on verbose logging
    #ASPNETCORE_ENVIRONMENT: 'verbose'
    components:
    image: '' # name of the container to use as an installer
    packages: [] # list of extra Nuget Packages to install in server in name, or name/version pairs
                 # version should be a supported nuget version format.
    sources: {} # Nuget sources to use
  secrets: [] # extra secrets to inject into the pod
  service:
    annotations:
      ingress.kubernetes.io/rewrite-target: /
  readinessProbe:
    httpGet:
      scheme: HTTP
      path: /health/liveness
      port: 9000
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    failureThreshold: 15
  livenessProbe:
    httpGet:
      scheme: HTTP
      path: /health/liveness
      port: 9000
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 20
  roles:
    main:
      count: 1
      resources:
        limits:
          cpu: "2"
          memory: "10Gi"
        requests:
          cpu: "1.5"
          memory: "4Gi"
    processing:
      extraConfiguration: []
      count: 1
      jobServer:
        visibility: "localOnly"
      resources:
        limits:
          cpu: "4"
          memory: "8Gi"
        requests:
          cpu: "4"
          memory: "4Gi"
    crawling:
      count: 0
      resources:
        limits:
          cpu: "2"
          memory: "12Gi"
        requests:
          cpu: "2"
          memory: "8Gi"

webapi:
  image: cluedin/app:3.2.5
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    # change to verbose - for verbose logging
    ASPNETCORE_ENVIRONMENT: 'Production'
    NODE_ENV: 'production'
  readinessProbe:
    httpGet:
      scheme: HTTP
      path: /api/status
      port: 8080
    timeoutSeconds: 5
    periodSeconds: 20
  livenessProbe:
    httpGet:
      scheme: HTTP
      path: /api/status
      port: 8080
    timeoutSeconds: 5
    periodSeconds: 20
  resources:
    limits:
      cpu: "0.5"
      memory: "512Mi"
    requests:
      cpu: "0.25"
      memory: "256Mi"

# Official chart from : https://github.com/elastic/helm-charts/tree/master/elasticsearch
elasticsearch:
  enabled: true
  imageTag: 7.8.0

  replicas: 1
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s" #Set when replicas = 1

  resources:
    limits:
      cpu: 7
      memory: 28Gi

  # Request smaller persistent volumes.
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 4Gi
    # Leave empty if using PVCs inside the cluster

neo4j:
  tolerations: [] # Add toleration selector to deployment
  nodeSelector: {}
  affinity: {}
  strategy:
    type: Recreate
  image: cluedin/neo4j:3.2.5
  persistence:
    enabled: true
    backup: false
    # claimName: override claimnName - defaults to release.name-neo4j-data
    accessModes:
    - ReadWriteOnce
    storageSize: 512Mi
    # azureDisk: # Uncomment to use Azure Managed Disks
    #   data:
    #     diskName:
    #     diskURI:
    #     diskKind:
    #   backup:
    #     diskName:
    #     diskURI:
    #     diskKind:
  readinessProbe: {}
  livenessProbe: {}
  environment:
    NEO4J_AUTH: 'none'
    NEO4J_dbms_directories_data: /data
    NEO4J_dbms_threads_worker__count: 150
    # RUDI - using output of bin/neo4j-admin memrec --memory=14g
    # run above command in neo4j pod shell
    # i.e. use --memory=14g if your resources.limits.memory below is 14g
    # see https://neo4j.com/docs/operations-manual/current/tools/neo4j-admin/neo4j-admin-memrec/
    NEO4J_dbms_memory_heap_initial__size: 4900m
    NEO4J_dbms_memory_heap_max__size: 4900m
    NEO4J_dbms_memory_pagecache_size: 5600m
  resources:
    # RUDI - resources increased from default to "medium" sized CluedIn instance
    limits:
      cpu: "7"
      memory: "14Gi"
    requests:
      cpu: "7"
      memory: "10G"

sqlserver:
  isExternal: false # Is SQL Server running external to the cluster (e.g Azure SQL)
  tolerations: [] # Add toleration selector to deployment
  nodeSelector: {}
  affinity: {}
  useColdStart: true
  saPassword: ""
  strategy:
    type: Recreate
  image: cluedin/sqlserver:3.2.5
  pullPolicy: IfNotPresent
  collation: SQL_Latin1_General_CP1_CI_AS
  lcid: 1033
  # connectionsSecretName: add your own connection strings
  # you will need to ensure you provide your own sqlserver with the databases initialised

  persistence:
    enabled: true
    # claimName: override claimnName - defaults to release.name-sqlserver-data
    # transactionLogClaimName: override transactionLogClaimName default to release.name sqlserver-transact
    # backupClaimName: override backupClaimName default to release.name sqlserver-backup
    # masterClaimName: override masterClaimName default to release.name sqlserver-master
    transactionlogClaim: sqlserver-transact
    backupClaim: sqlserver-backup
    masterClaim: sqlserver-master
    accessModes:
    - ReadWriteOnce
    storageSize: 512Mi
    # azureDisk: # Uncomment to use Azure Managed Disks
    #   data:
    #     diskName:
    #     diskURI:
    #     diskKind:
    #   transactionlog:
    #     diskName:
    #     diskURI:
    #     diskKind:
    #   master:
    #     diskName:
    #     diskURI:
    #     diskKind:
    #   backup:
    #     diskName:
    #     diskURI:
    #     diskKind:
  connectionString: '' # Leave empty to use SQL inside the cluster
  connectionTimeout: 15 # Timeout (in seconds) for connections when using SQL inside the cluster
  readinessProbe:
    initialDelaySeconds: 120
    periodSeconds: 5
    tcpSocket:
      port: 1433
  livenessProbe:
    initialDelaySeconds: 120
    periodSeconds: 5
    tcpSocket:
      port: 1433
  resources:
    # RUDI - resources increased from default to "medium" sized CluedIn instance
    limits:
      cpu: "6"
      memory: "16Gi"
    requests:
      cpu: "3"
      memory: "8Gi"

redis:
  isExternal: false # Is Redis running external to the cluster
  tolerations: [] # Add toleration selector to deployment
  nodeSelector: {}
  affinity: {}
  image: 'redis:5.0-alpine'
  strategy:
    type: Recreate
  persistence:
    enabled: true
    backup: false
    # claimName: override claimnName - defaults to release.name-redis-data
    accessModes:
    - ReadWriteOnce
    storageSize: 512Mi
    # azureDisk: # Uncomment to use Azure Managed Disks
    #   data:
    #     diskName:
    #     diskURI:
    #     diskKind:
    #   backup:
    #     diskName:
    #     diskURI:
    #     diskKind:
  connectionString: '' # Leave empty to use Redis inside the cluster
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    initialDelaySeconds: 30
    timeoutSeconds: 2
    periodSeconds: 5
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    initialDelaySeconds: 30
    timeoutSeconds: 2
    periodSeconds: 5
  resources:
    limits:
      cpu: "1"
      memory: "512Mi"
    requests:
      cpu: "0.1"
      memory: "128Mi"

rabbitmq:
  enabled: true
#  image:
#    tag: 3.8.23
  auth:
    erlangCookie: "CluedInErlangSecret"
    username: "guest"
    password: "guest"
  metrics:
    enabled: false # Disabled by default
  memoryHighWatermark:
    enabled: true
    type: 'relative'
    value: '0.8'
  tolerations: [] # Add toleration selector to deployment
  nodeSelector: {}
  resources:
    # RUDI - resources increased from default to "medium" sized CluedIn instance
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "1"
      memory: "4Gi"
  persistence:
    size: '4Gi'
  extraConfiguration: |-
    prometheus.return_per_object_metrics = true
    load_definitions = /app/load_definition.json
  extraSecrets:
    cluedin-rabbitmq-load-definition:
      load_definition.json: |
        {
          "users": [
            {
              "name": "{{ .Values.auth.username }}",
              "password": "{{ .Values.auth.password }}",
              "tags": "administrator"
            }
          ],
          "permissions": [
            {
              "user": "{{ .Values.auth.username }}",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
          ],
          "vhosts": [
            {
              "name": "/"
            }
          ],
          "policies": [
            {
              "name": "lazy-queue",
              "vhost": "/",
              "pattern": ".*",
              "apply-to":"queues",
              "definition": {
                "queue-mode": "lazy"
              }
            }
          ]
        }
  loadDefinition:
    enabled: true
    existingSecret: cluedin-rabbitmq-load-definition

openrefine:
  enabled: true
  image:
    tag: "3.2.5"
  host: '{{ template "cluedin.fullname" . }}-openrefine'
  port: 3333
  tolerations: [] # Add toleration selector to deployment
  nodeSelector: {}
  affinity: {}
  persistence:
    enabled: true
    persistentVolumeClaim:
      storageSize: 512Mi
      accessModes: [ "ReadWriteOnce" ]
#      overrideClaimName: "blah-data" # Provide existing PVC name - skips creation

# To enable AZURE disk support..
#    azureDisk:
#      kind:
#      diskName:
#      diskURI:

oauth2:
  enabled: false #set to "true" to enable oauth2
  nodeSelector: {}
  tolerations: []
  affinity: {}
  for:
  - seq
  - openrefine
  - grafana-admin
  - prometheus-admin
  image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
  resources:
    limits:
      cpu: 0.3
      memory: 256Mi
    requests:
      cpu: 0.1
      memory: 128Mi
  environment:
    OAUTH2_PROXY_PROVIDER: azure
    # OAUTH2_PROXY_EMAIL_DOMAIN
    # this variable may be required
    # there is a bug in the image that requires this
    # to be passed as cmd line argument
    # the template will do that
  secretRefName:
    # name of a secret to inject environment variables
    # typically containing values for:
    # OAUTH2_PROXY_CLIENT_ID
    # OAUTH2_PROXY_CLIENT_SECRET
    # OAUTH2_PROXY_COOKIE_SECRET

seq:
  image: '' # To use seq in the cluster, set this to a seq image (e.g. 'datalust/seq')
  nodeSelector: {}
  tolerations: []
  affinity: {}
  readinessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 20
  livenessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 20
  resources:
    limits:
      cpu: "0.25"
      memory: "256Mi"
    requests:
      cpu: "0.1"
      memory: "128Mi"

clean:
  image: cluedin/cluedin-micro-clean:3.2.5
  # update to debug - to set logging to debug
  loggingLevel: info
  nodeSelector: {}
  tolerations: []
  affinity: {}
  dbEncrypt: "false"
  dbHost: ""        # Defaults to internal SqlServer
  dbUserName: ""    # Defaults to 'sa'
  environment: ""   # Defaults to 'Production'
  readinessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  livenessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 128Mi

annotation:
  image: cluedin/cluedin-micro-annotation:3.2.5
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # update to debug - to set logging to debug
  loggingLevel: info
  dbEncrypt: "false"
  dbHost: ""        # Defaults to internal SqlServer
  dbUserName: ""    # Defaults to 'sa'
  environment: ""   # Defaults to 'Production'
  readinessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  livenessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 125m
      memory: 64Mi

datasource:
  image: cluedin/cluedin-micro-datasource:3.2.5
  # update to debug - to set logging to debug
  loggingLevel: info
  nodeSelector: {}
  tolerations: []
  affinity: {}
  dbEncrypt: "false"
  dbHost: ""        # Defaults to internal SqlServer
  dbUserName: ""    # Defaults to 'sa'
  environment: ""   # Defaults to 'Production'
  ingestionRequestLimit: "1mb" # Maximum packet size for uploading via Endpoint
  readinessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  livenessProbe:
    httpGet:
      path: /status
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
  resources:
    limits:
      cpu: 1
      memory: 4Gi
    requests:
      cpu: 125m
      memory: 2Gi

submitter:
  image: cluedin/cluedin-micro-submitter-node:3.2.5
  # RUDI - if you got an earlier 3.2.5 chart then you may need to update this to the v2 path
  clueSubmissionApiPath: /api/v2/clue?save=true
  #original value in older 3.2.4 chart 
  #clueSubmissionApiPath: /api/v1/clue
  nodeSelector: {}
  tolerations: []
  affinity: {}
  apiToken: TBD
  readinessProbe:
    null
  livenessProbe:
    httpGet:
      path: /health/live
      port: 8888
    timeoutSeconds: 5
    periodSeconds: 20
  resources:
    # RUDI - resources increased from default to "medium" sized CluedIn instance
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 128Mi

gql:
  image: cluedin/cluedin-ui-gql:3.2.5
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources:
    # RUDI - resources increased from default to "medium" sized CluedIn instance
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 64Mi
  dbEncrypt: "false"
  dbHost: ""        # Defaults to internal SqlServer
  dbUserName: ""    # Defaults to 'sa'
  environment: ""   # Defaults to 'Production'
  engineRoom:
    globalDashboard:
      id: "efa86fd1d0c121a26444b636a3f509a8"
      name: "kubernetes-compute-resources-cluster"
    mainDashboard:
      id: "a164a7f0339f99e89cea5cb47e9be617"
      name: "kubernetes-compute-resources-workload"
    streamDashboard:
      id: "h0W9h3knk"
      name: "streams"

forceTableCreation: 'false'

ui:
  image: cluedin/ui:3.2.5
  nodeSelector: {}
  tolerations: []
  affinity: {}
  features:
   - annotation
   - clean
   - cluedinClean
   - connector
   - data-governance
   - datasource
   - developer
   - duplication-project
   - endpoint
   - enricher
   - extended-sar
   - glossary
   - integrations
   - metrics
   - preparation
   - roles
   - settings
   - stream
   - streamMonitoring
   - streams
   - users
  extensionConfigMap: ""
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    timeoutSeconds: 5
    periodSeconds: 20
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    timeoutSeconds: 5
    periodSeconds: 20
  resources:
    limits:
      cpu: 750m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

